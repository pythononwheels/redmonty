{% extends "base.bs4" %}

{% block include_css %}
    <!--link href="{{static_url("css/prism.css")}}" rel="stylesheet" /-->
    <link href="{{static_url("css/highlight-styles/hopscotch.css")}}" rel="stylesheet" />
    <link href="{{static_url("css/awesomplete.css")}}" rel="stylesheet" />
    <!--link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/css/select2.min.css" rel="stylesheet" /--> 
    
{% end %}

{% block view_css %}
 <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      @media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      #accordion{
        width:400px;
        position:absolute;
        bottom:0;
        }
    .awesomplete {
        width: 100%;
    }
    .btn-cli {
        margin-top: 3px;
        margin-right: 3px;
        margin-bottom: 3px;
    }
    .tooltip-inner {
        min-width: 100px;
        max-width: 100%; 
    }
    
    .scroll_card {
        max-height: 650px;
        overflow-y: auto;
    }
    </style>

{% end %}

{% block content %}
    <div class="" id="dbmanager_div">
        <div class="container">
            <div class="card-deck">
                <!--div class="col-lg-4"-->
                        <div class="card text-white bg-dark mb-3" >
                            <div class="card-header">Connected to </div>
                            <div class="card-body">
                                <h6>Host: <small class="text-muted" id="hostname"></small></h6>
                                <p >DB: <span id="dbname"></span></p>
                            </div>
                        </div>
                <!--/div-->
                <!--div class="col-lg-4"-->
                        <div class="card text-white bg-dark mb-3" >
                            <div class="card-header">Clients</div>
                            <div class="card-body">
                                <span class="card-title" id="clients_info"></span>
                                <button class="btn btn-sm btn-danger" id="disconnect">
                                    <i class="fas fa-unlink"></i>
                                    disconnect
                                </button>
                                
                            </div>
                        </div>
                <!--/div-->
                <!--div class="col-lg-4"-->
                        <div class="card text-white bg-dark mb-3">
                            <div class="card-header" id="server_info_os"></div>
                            <div class="card-body">
                                <ul>
                                    <li>
                                        <h7 class="card-title">Redis:</h7>
                                        <span id="redis_version"></span>
                                    </li>
                                    <li>
                                            <h7 class="card-title">Redis Mode:</h7>
                                            <span id="redis_mode"></span>
                                        </li>
                                    <!--li>
                                        <h7 class="card-title">CPU (sys):</h7>
                                        <span id="server_info_cpu_sys"></span>
                                    </li>
                                    <li>
                                        <h7 class="card-title">MEM:</h7>
                                        <span id="server_info_mem"></span>
                                    </li-->
                                </ul>
                            </div>
                        </div>
                <!--/div-->
                
            </div>
        </div>
        <div class="container mt-1">
            <!-- redis ui container -->
            <div class="row" style="margin-left: 5px">
                <div class="col-lg-4">
                    <div class="row">
                        <form >                            
                            <div class="form-group">
                                <label for="keyscan">scan(<span id="scan_cursor"></span>):</label>
                                
                                <button class="btn btn-sm btn-light" 
                                        id="inc_scan_cursor"
                                        data-toggle="tooltip" data-placement="top" title="get next page of keys">
                                    <i class="fas fa-chevron-circle-right"></i>
                                </button>
                                <button class="btn btn-sm btn-light" id="scan_reset"
                                        data-toggle="tooltip" data-placement="right" title="reset scan pattern and cursor">
                                    <i class="fas fa-times-circle"></i>
                                </button>
                                <select id="get_option">
                                    <option selected>GET</option>
                                    <option >HGETALL</option>
                                </select>
                                </div>
                                <input type="text" class="form-control" 
                                    autocomplete="off"
                                    id="keyscan" placeholder="key1:key2:*">
                        </form>
                    </div>
                    <div class="row" >
                        <ul class="list-group" id="keys" style="display: inline-block">

                        </ul>
                    </div>
                </div>

                <div class="col-lg-8" >
                    <div class="form-group row" style="margin-right: 5px">
                        <label for="staticEmail" class="col-sm-1 col-form-label">key:</label>
                        <div class="col-sm-11">
                            <input type="text" class="form-control" id="current_key_input" value="">
                        </div>
                    </div>
                    <!-- 
                        *************
                        the editor
                        *************
                    -->
                    <div class="row" style="margin-right: 5px">
                        <div id="reditor" style="height: 300px; width: 100%"></div>
                        <span id="current_key" style="display: none">
                    </div>
                    <div class="d-flex flex-row bg-light" style="margin-top: 20px;">
                            <div class="p-2">
                                <button class="btn btn-info" id="btn_update"><i class="fas fa-edit mr-1"></i>update</button>
                            </div>
                            <div class="p-2">
                                <button class="btn btn-success" id="btn_create"><i class="fas fa-plus-square mr-1"></i>create</button>
                            </div>
                            <div class="p-2">
                                    <select class="form-control" id="set_option">
                                        <option selected>SET</option>
                                        <option>HMSET</option>
                                    </select>
                            </div>
                            <div class="p-2 flex-grow-1">
                                <div class="alert alert-light" id="feedback" role="alert"></div>
                            </div>
                            <div class="p-2">
                                <button class="btn btn-danger" id="btn_delete"><i class="fas fa-trash-alt mr-1"></i>delete</button>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
     <!-- 
        *******************
        the server_info
        *******************
    -->
    <div class="container mt-1" id="serverinfo_div">
        <div class="row" style="margin-left: 5px">
            <div>
                <h3 class="mt-3">Server Info(raw):</h3>
                <p class="lead" id="serverinfo_hostname"></p>
            </div>
            <div class="" style="width: 100%; overflow-y: auto !important;
            overflow-x: auto !important; max-height: 550px">
                    <pre>
                        <code id="serverinfo_code"> </code>
                    </pre>
            </div>
        </div>
    </div>
    <!-- 
        *************
        the cli 
        *************
    -->
    <div class="container" id="cli_div">
        <div class="row" style="margin-top: 20px;">
            <div class="col-lg-7">
                <div class="input-group">  
                    <input type="text" class="form-control" name="input_cli" id="input_cli"
                        data-toggle="tooltip" data-placement="top">
                    <span class="input-group-btn">
                            <button class="btn btn-success btn-sm btn-cli" id="fire_cli"><i class="fas fa-chevron-right"></i></button>
                    </span>
                    <span class="input-group-btn">
                        <button class="btn btn-info btn-sm btn-cli" id="help_cli"><i class="fas fa-question-circle"></i></button>
                    </span>
                </div>
                <div class="" style="width: 100%; overflow-y: auto !important;
                            overflow-x: auto !important; max-height: 850px">
                    <pre>
                        <code id="feedback_cli"> </code>
                    </pre>
                </div>
            </div>
            <div class="col-lg-5">
                <div class="card scroll_card" id="help_card" style="width: 100%;">
                    <div class="card-body">
                        <h5 class="card-title" id="help_card_title">Adapted Help</h5>
                        <h6 class="card-subtitle mb-2 text-muted" id="help_card_subtitle">[Patterns], Sections</h6>
                        <p class="card-text" id="help_card_text">For Redis commands</p>
                        <p class="card-text" id="help_card_details"> 
                            And the full help text details with examples will be displayed here when you select a command 
                            from the autocomplete list...
                        </p>
                        <a href="https://redis.io/commands" class="card-link" id="help_card_link">
                           ..all commands</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

{% end %}

{% block include_js %}
    <script src="https://pagecdn.io/lib/ace/1.4.5/ace.js" integrity="sha256-5Xkhn3k/1rbXB+Q/DX/2RuAtaB4dRRyQvMs83prFjpM=" crossorigin="anonymous"></script>
    <!--script src="{{static_url("js/prism.js")}}"></script-->
    <script src="{{static_url("js/highlight.pack.js")}}"></script>
    <script src="{{static_url("js/modalloading.js")}}"></script>    
    <script src="{{static_url("js/awesomplete.js")}}"></script>
    <!--script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/js/select2.min.js"></script-->
{% end %}

{% block view_js %}
    <script>
        
        var clientId = generateUUID();

	// 
	// open the websocket
	//
        var loc = window.location, new_uri;
	if (loc.protocol === "https:") {
	    new_uri = "wss:";
	} else {
	    new_uri = "ws:";
	}
	new_uri += "//" + loc.host + "/websocket";
	console.log(new_uri);
        var ws = new WebSocket(new_uri);

        var editor = ace.edit("reditor");
        var serverinfo_data;
        var last_scan_cursor = 0;
        var commands_full;
        var commands = [];
        var awesomplete;
        //editor.setTheme("ace/theme/dracula");
        editor.setTheme("ace/theme/github");
        editor.session.setMode("ace/mode/json");
        editor.setShowPrintMargin(false);
        editor.renderer.setShowGutter(false);
        /*editor.setOptions({
            //fontFamily: "tahoma",
            fontSize: "11pt"
            });
        */
        var current_connection = "{{connection_id}}";

        ws.onopen = function() {
                data={
                    "client_id"     : clientId,
                    "connection_id" : current_connection,
                    "method"        : "welcome",
                    "data"          : "hello world."
                }

                ws.send(JSON.stringify(data));
            };

        ws.onmessage = function (evt) {
            //
            // checking the message type and 
            // generate the appropriate output        
            data=JSON.parse(evt.data);
            console.log("I received: " + JSON.stringify(data, null, 2));
            // if info 
            console.log("I received: data['type'] :" + data["type"])
            switch (data["type"]) {
                case "info":
                    // update the info boxes (cards)
                    console.log("ok: info");
                    serverinfo_data = data["data"];
                    serverinfo_data["hostname"] = data["data"]["hostname"];
                    serverinfo_data["dbname"] = data["data"]["dbname"];
                    modalLoading.init(false);
                    console.log(JSON.stringify(data["data"], null, 2));
                    $("#hostname").text(data["data"]["hostname"]);
                    $("#dbname").text(data["data"]["dbname"]);
                    $("#result").text(JSON.stringify(data["data"], null, 2));
                    $("#result").show();
                    $("#redis_version").text(data["data"]["redis_version"]);
                    $("#redis_mode").text(data["data"]["redis_mode"]);
                    $("#clients_info").text(data["data"]["connected_clients"]);
                    $("#server_info_os").text("OS: " + data["data"]["os"].slice(0,30));
                    $("#server_info_cpu_sys").text(data["data"]["used_cpu_sys"]);
                    $("#server_info_mem").text(data["data"]["used_memory_human"]);
                    $("#serverinfo_code").text(JSON.stringify(data["data"], null, '\t'),-1)
                    break;
                case "message":
                    // display the message in an alert
                    $("#result").text(data["data"]);
                    $("#result").show();
                    break;
                case "getval":
                    // display the value in the editor
                    $("#scanres").text(JSON.stringify(data["data"], null, 2))
                    var key=$("#current_key").text();
                    $("#current_key_input").val(key);
                    editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);          
                    break;
                case "hgetall":
                    // display the value in the editor
                    $("#scanres").text(JSON.stringify(data["data"], null, 2))
                    var key=$("#current_key").text();
                    $("#current_key_input").val(key);
                    editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);         
                    break;
                case "disconnect":
                    // display the message in the #feedback alert box
                    console.log("redirecting to: " + JSON.stringify(data["data"]));
                    // and redirect
                    window.location.href = data["data"]
                    break;
                case "update":
                    // display the message in the #feedback alert box
                    //$("#scanres").text(JSON.stringify(data["data"], null, 2))
                    //editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);
                    //$("#feedback").text(JSON.stringify(data["data"], null, 2));
                    $("#feedback").text(data["data"]);
                    break;
                case "cli":
                    // display the message in the #feedback alert box
                    //$("#scanres").text(JSON.stringify(data["data"], null, 2))
                    //editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);
                    $("#feedback_cli").text(JSON.stringify(data["data"], null, '\t'),-1)
                    break;
                case "create":
                    /// display the message in the #feedback alert box
                    //$("#scanres").text(JSON.stringify(data["data"], null, 2))
                    //editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);
                    $("#feedback").text(JSON.stringify(data["data"], null, 2));
                    break;

                case "delete":
                    // display the message in the #feedback alert box
                    //$("#scanres").text(JSON.stringify(data["data"], null, 2))
                    //editor.setValue(JSON.stringify(data["data"], null, '\t'),-1);
                    $("#feedback").text(JSON.stringify(data["data"], null, 2));
                    clear_all();

                    break;

                case "scan":
                    // get the scan(pattern) results (paged, default = 5)
                    $("#scanres").text(JSON.stringify(data["data"], null, 2))
                    // key = data["data"][0]
                    // value list = data["data"][1]
                    //console.log("Liste 0:" +data["data"][0])
                    //console.log("Liste 1:" + data["data"][1])
                    last_scan_cursor = data["data"][0]
                    var list=data["data"][1] 
                    $("#keys").empty();
                    for(var elem=0; elem<list.length; elem++){
                        //console.log("Elem: " + elem)
                        $("#keys").append(
                            '<a href="#" onclick="getval(this.id)" id="' + list[elem] + '"' + 
                                'class="list-group-item list-group-item-action">' + 
                                list[elem] +
                                "</li>"
                        );
                    }
                    break;                
                case "error":
                    // update the info boxes
                    modalLoading.init(false);
                    console.log("Message Error : " + JSON.stringify(data, null, 2)  );
                    if (data["redirect"] == true ){
                        // show the error message and redirect afterwards
                        alert(data["message"]);
                        window.location.href=data["redirect_url"]
                    } else {
                        $("#result").text(data["data"]);
                        $("#result").show();
                    }
		    alert(JSON.stringify(data, null, 2));
		    window.location.replace("/connections_list");
                    break;

                default:
                    console.log("unhandled message type: " + data["type"] + " ...Should not happen!")
            }
        };
        
        function getval(id){
            // gets or hget all the value of the clicked key
            console.log("#get_option is: " + $("#get_option").val().toLowerCase() );
            if ($("#get_option").val().toLowerCase()=="hgetall"){
                console.log("hgetall: " + id);
                $("#current_key").text(id);
                send_msg(method="hgetall", data=id);
            } else {
                // use get as the default. (in any other case)
                console.log("getval: " + id);
                $("#current_key").text(id);
                send_msg(method="getval", data=id);
            } 
        }

        function send_msg(method="NONE", data=null){
            // sending the form message to the server
            data={
                "client_id" : clientId,
                "method"    : method,
                "data"      : data
            }
            ws.send(JSON.stringify(data));            
        }
        
        
        $("#keyscan").keypress(function(event) {
            //console.log( "key:" + String.fromCharCode(event.which) );
            // https://stackoverflow.com/questions/12955222/how-to-trigger-html-button-when-you-press-enter-in-textbox
            console.log($("#keyscan").val())
            send_msg(method="scan", data={
                "cursor": 0,
                "data"  : $("#keyscan").val()+String.fromCharCode(event.which)
                }
            );
        });
        
        $("#disconnect").click(function(){
            console.log("disconecting...from: {{connection_id}}");
            send_msg(method="disconnect", data=current_connection);
        });
        
        $("#inc_scan_cursor").click(function(e){
            // update the value of the current_key
            e.preventDefault();
            //$("#feedback").removeClass();
            //$("#feedback").addClass("alert alert-info");
            var key=$("#current_key").text();
            //$("#feedback").text("Scanning: " + last_scan_cursor);
            $("#scan_cursor").text(last_scan_cursor);
            send_msg(method="scan", data={
                "cursor": last_scan_cursor,
                "data"  : $("#keyscan").val()
                }
            );
        });

        $("#scan_reset").click(function(e){
            // update the value of the current_key
            //$("#feedback").removeClass();
            //$("#feedback").addClass("alert alert-info");
            e.preventDefault();
            var key=$("#current_key").text();
            //$("#feedback").text("reset scan cursor and pattern: " + last_scan_cursor);
            last_scan_cursor = 0;
            $("#scan_cursor").text(last_scan_cursor);
            $("#keyscan").val("");
            clear_all();
            $("#keys").empty();
        });

        $("#link_serverinfo").click(function(e){
            // show the server info of redis
            e.preventDefault();
            console.log("serverinfo link: " + e);
            var key=$("#current_key").text();
            // prepare the UI
            $("#cli_div").hide();
            $("#dbmanager_div").hide();
            $("#serverinfo_div").show();
            $("#link_redisdb").removeClass("active");
            $("#link_cli").removeClass("active");
            $("#link_serverinfo").addClass("active");
            //send_msg(method="update", data={"value": editor.getValue(), "key" : key });
            $("#serverinfo_hostname").text(serverinfo_data["hostname"] + ":db(" + serverinfo_data["dbname"] + ")");
        });
        
        $("#link_redisdb").click(function(e){
            // show the redis dash
            e.preventDefault();
            console.log("redisdb link: " + e)
            var key=$("#current_key").text();
            // prepare the UI
            $("#cli_div").hide();
            $("#dbmanager_div").show();
            $("#serverinfo_div").hide();
            $("#link_cli").removeClass("active");
            $("#link_serverinfo").removeClass("active");
            $("#link_redisdb").addClass("active");
            //send_msg(method="update", data={"value": editor.getValue(), "key" : key });
        });
        /*
        document.querySelector('#input_cli').addEventListener("focusout", onInput);
        function onInput(e) {
            var val = document.querySelector('#input_cli').value;
            options = document.getElementById('commands').childNodes;
            console.log(val);
        }
        */
        $("#link_cli").click(function(e){
            // show the cli div
            e.preventDefault();
            console.log("cli link: " + e);
            var key=$("#current_key").text();
            // prepare the UI
            $("#cli_div").show();
            $("#dbmanager_div").hide();
            $("#serverinfo_div").hide();
            $("#link_redisdb").removeClass("active");
            $("#link_serverinfo").removeClass("active");
            $("#link_cli").addClass("active");
            //$("#feedback_cli").html("");
            // get the list of commands as json from the server
            $.getJSON( "/getcommands", function( data ) {
                var items = [];
                commands_full = data["data"];
                $.each( data["data"], function( key, val ) {
                    // data is a list
                    // key is the current item number ++ for each item in data
                    // val is the  i(th) data
                    commands.push(val["name"]);
                    
                    //$("#commands").append('<option value="' + val["_uuid"] + '">' + val["name"] + '</option>');
                });
                //console.log(commands);
                //console.log(JSON.stringify(commands_full));

            });
            var input = document.getElementById("input_cli");
            awesomplete = new Awesomplete(input,
                {
                    minChars: 1,
                    maxItems: 5
                }
            );
            //
            // set the seclectcomplete function.
            //
            $("#input_cli").on('awesomplete-selectcomplete',function(){
                // map the cuurent command to the commands_full array
                //var current_command = commands_full.find(x => x.name === this.value);
                var current_command =commands_full[this.value];
                                
                var title = current_command["name"] + " " + current_command["args"];
                // update the tooltip
                /*
                var elt = $("#input_cli");
                elt.attr('title', title);
                elt.attr('data-original-title', title);
                elt.tooltip('update');
                elt.tooltip('show');
                */
                /*
                $('input[rel="txtTooltip"]').tooltip({
                    container: 'body'
                });
                */
                // Mapping help_card => rediscommand model attributes
                // card_title, => command (category)
                // subtitle, => args
                // text, => summary
                // details => help_text
                $("#help_card_title").text(current_command["name"]);
                $("#help_card_subtitle").text(current_command["args"]);
                $("#help_card_text").text(current_command["summary"]);
                $("#help_card_details").html(current_command["help_text"]);
                console.log("Current command: " + current_command["name"] + " " + current_command["args"]);
                console.log("awesomleted. " + this.value);
            });
            awesomplete.list = commands;
            //send_msg(method="update", data={"value": editor.getValue(), "key" : key });
        });
        
        $("#input_cli").keyup(function(event){
            console.log("cli:" + event.key);
            if (event.key == "Enter"){
                // fire the command
                $("#fire_cli").click();
                event.preventDefault();
            }
        });
        
        $("#fire_cli").click(function(e){
            // fire the cli command
            e.preventDefault();
            var clival = $("#input_cli").val();
            console.log("fireing cli: " + clival);
            send_msg(method="cli", data=clival);
        });

        $("#help_cli").click(function(e){
            // dislplay all commands short help
            e.preventDefault();
            var clival = $("#input_cli").val();
            console.log("fireing cli: " + clival);
            send_msg(method="cli", data=clival);
        });

        $("#btn_update").click(function(){
            // update the value of the current_key
            $("#feedback").removeClass();
            $("#feedback").addClass("alert alert-info");
            var key=$("#current_key").text();
            $("#feedback").text("Updating key: " + key);
            console.log("Update: " + key + " value: " + editor.getValue());
            set_command = $("#set_option").val();
            send_msg(method="update", data={"value": editor.getValue(), "key" : key, "command" : set_command });
        });

        $("#btn_create").click(function(){
            // create a new value using the given key
            // be careful. At this point this might override any exsting key...
            // without asking.
            $("#feedback").removeClass();
            $("#feedback").addClass("alert alert-info");
            var key=$("#current_key_input").val()
            $("#feedback").text("creating key: " + key);
            console.log("Create: " + key + " value: " + editor.getValue());
            set_command = $("#set_option").val();
            send_msg(method="create", data={"value": editor.getValue(), "key" : key, "command" : set_command });
        });

        $("#btn_delete").click(function(){
            // update the value of the current_key
            $("#feedback").removeClass();
            $("#feedback").addClass("alert alert-info");
            var key=$("#current_key").text();
            $("#feedback").text("deleting key: " + key);
            send_msg(method="delete", data={"value": editor.getValue(), "key" : key });
        });

        hljs.initHighlightingOnLoad();
        function clear_all(){
            $("#keyscan").val("");
            $("#current_key_input").val("");
            $("#current_key").val("");
            editor.setValue("");
        }
        function view_docready(){    
            // called from the parent view's docready function.
            
            // modalLoading.init(true);
            $("#serverinfo_div").hide();
            $("#cli_div").hide();
            $("#scan_cursor").text(last_scan_cursor);
            /*
            $(function () {
                $('[data-toggle="tooltip"]').tooltip()
            });
            */
        }   
    </script>

{% end %}
